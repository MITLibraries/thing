<%= content_for(:title, "Transfer Processing | MIT Libraries") %>

<% content_for :additional_js do %>
  <script src="https://cdn.datatables.net/1.11.3/js/jquery.dataTables.min.js"></script>
<% end %>

<link href="https://cdn.datatables.net/1.11.3/css/jquery.dataTables.min.css" rel="stylesheet">

<h3 class="title title-page">Transfer Processing Queue</h3>

<div id="term-list" class="filter-row">
  <button class="btn button-primary" data-filter="*">Show<br>all</button>
</div>

<table class="table" id="transferQueue">
  <thead>
    <tr>
      <th scope="col">Transfer date</th>
      <th scope="col">Degree date</th>
      <th scope="col">Department</th>
      <th scope="col">Dept. Admin</th>
      <th scope="col">Files</th>
      <th scope="col">Notes</th>
    </tr>
  </thead>
  <tbody>
    <%= render(partial: 'transfer/transfer', collection: @transfers) || render('empty') %>
  </tbody>
</table>

<script type="text/javascript">
function applyFilter(table, _degreeDate) {
  // Update UI
  $("#term-list").find(".button-primary").removeClass("button-primary").addClass("button-secondary");
  $('#term-list button[data-filter="' + _degreeDate + '"]').removeClass("button-secondary").addClass("button-primary");

  // Filter the data table
  table.draw();
}

$(document).ready( function () {
  if( document.getElementById('transferQueue').getElementsByClassName('empty').length === 0 ) {
    // _degreeDate is the variable which the custom filter behavior looks for.
    var _degreeDate = '*';

    // Initialize DataTable, sorting by default on the degree column (columns are zero-based)
    var table = $('#transferQueue').DataTable({
      stateSave: true,
      stateSaveParams: function( settings, data ) {
        data.filter = _degreeDate;
      },
      stateLoadParams: function( settings, data ) {
        if ( data.filter ) {
          _degreeDate = data.filter;
        }
      }
    });

    // Add filter for "Degree date" column to standard table behavior
    // From: https://datatables.net/blog/2014-08-26#Complete-code
    // Note that this new behavior is invoked on calling table.draw()
    $.fn.dataTable.ext.search.push(
      function( settings, data, dataIndex ) {
        return ( data[1] === _degreeDate || _degreeDate === "*" )
          ? true
          : false
      }
    );

    // Populate filter buttons with found values
    var terms = [...new Set( table.columns(1).data()[0] )];
    terms.forEach(element => {
      document
        .getElementById("term-list")
        .insertAdjacentHTML("beforeend", `
        <button class="btn button-secondary" data-filter="${element}">${element.replace(' ', '<br>')}</button>
      `);
    });

    // Apply initial filter
    applyFilter(table, _degreeDate);

    // Assign event listeners to filter buttons which call applyFilter
    // Yes, we are taking "this" and looking up its data attribute, only to look the button up again by its data
    // attribute again inside applyFilter. It is less efficient, but we do this to match the behavior on page load, when
    // the table state is read from storage and we only have a string, not a "this", and need to find the button.
    $("#term-list button").click(function() {
      _degreeDate = $(this).data("filter");
      applyFilter(table, _degreeDate);
    });
  }
});
</script>