require 'test_helper'

class ReportTest < ActiveSupport::TestCase
  test 'overall card uses search term if present' do
    r = Report.new
    result = r.card_overall Thesis.all, 'all'
    assert_equal result['link']['url'], '/admin/theses'
    result = r.card_overall Thesis.all, Thesis.first.grad_date
    assert_match Thesis.first.grad_date.to_s, result['link']['url']
  end

  # pad_category is a private method that gets called by a few data_category_* methods, so we look for its influence
  # there.
  test 'pad_category will add rows for each expected value in the category' do
    r = Report.new
    expected_rows = Thesis.publication_statuses.count
    returned_rows = r.index_data['Publication status'].count
    # Not all licenses are represented in our fixtures...
    assert_not_equal expected_rows, Thesis.all.joins(:license).pluck(:display_description).uniq.count
    # ...but by the time we get data back for this category, all rows are present.
    assert_equal expected_rows, returned_rows
    # This includes a row of all zeros, which could only have been generated by pad_category
    assert_equal r.index_data['License'][3][:data].values, [0, 0, 0, 0, 0, 0, 0]
  end

  # pad_row is a private method that gets called by index_data, so we look for its influence there.
  test 'pad_row will add zeros for undefined academic terms' do
    r = Report.new
    expected_terms = Thesis.pluck(:grad_date).uniq.count
    returned_columns = r.index_data['Summary'][3][:data].count
    # Not all terms have theses with issues in our test fixtures...
    assert_not_equal expected_terms, Thesis.all.group(:grad_date).where('issues_found = ?', true).count.count
    # ...but by the time we get data for display back from a report, all columns are present.
    assert_equal expected_terms, returned_columns
    # Test for a row of expected values
    assert_equal r.index_data['Summary'][3][:data].values, [0, 0, 0, 0, 0, 0, 0]
  end
end
